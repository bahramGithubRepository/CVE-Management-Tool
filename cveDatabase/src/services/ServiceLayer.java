package services;

import java.sql.SQLException;
import java.util.ArrayList;

import javax.management.relation.Relation;

import dataModels.CVEObject;
import dataModels.DatabaseConnectionObject;
import dataModels.Message;
import dataModels.OutPutFormat;
import dataModels.CVEObject.CVEDataState;
import repository.MySQlRepository;
import repository.ReadFile;
import repository.WriteToFile;

public class ServiceLayer {
	String finalMessage;
	
	private MySQlRepository mySQLRepository=new MySQlRepository();
	private ReadFile readFile = new ReadFile();
	private WriteToFile writeToFile = new WriteToFile();
	private final int CONNECTION_ERROR=-1;


	public void readfile(String filePath,String brancheNam,Message message){
	
		  readFile.readFileTest(filePath, brancheNam, message);

	}
	/**
	 * make connection to database
	 * 
	 * @return
	 */
	public boolean connectToDatabse() {
		DatabaseConnectionObject connectionObject = getDatabaseConnectionSetting();
		return mySQLRepository.connectToDatabase(connectionObject);
	}

	/**
	 * Test Database Connection
	 * 
	 * @param databasePath
	 * @return
	 */
	public boolean testDataBaseConnection(DatabaseConnectionObject connectionObject) {
		MySQlRepository test=new MySQlRepository();
		return test.testConnection(connectionObject);
		

	}

	/**
	 * save Database Connection information in file
	 * 
	 * @param connectionObject
	 * @return
	 */
	public String saveDatabaseConnectionSetting(DatabaseConnectionObject connectionObject) {
		return writeToFile.fileWriter(connectionObject);

	}

	/**
	 * getDatabase connection information from file
	 * 
	 * @return
	 */
	public DatabaseConnectionObject getDatabaseConnectionSetting() {
		return readFile.getDatabaseConnectionInfo();

	}



	/**
	 * returns CVEObject
	 * 
	 * @param cve
	 * @return
	 * @throws SQLException
	 */
	public CVEObject getCVE(String cve,String productName, String releaseName) throws SQLException {
		return mySQLRepository.getCVE(cve, productName, releaseName);
	}
	
	public ArrayList<String> getProductList() throws SQLException{
		return mySQLRepository.getProductList();
	}

	public String addNewProduct(String newProduct){
		return mySQLRepository.addNewProductName(newProduct);
		
	}
	/**
	 * Gets special Item From Database and returns result to UI
	 * 
	 * @param query
	 * @param formatter
	 * @return
	 * @throws SQLException
	 */
	public String getSpecialItems(String query, OutPutFormat formatter,String releaseName) throws SQLException {

		return mySQLRepository.getSpecialQuery(query, formatter,releaseName);
		
	}


	public int addNewCVEToDatabase(CVEObject data) throws SQLException {
		ArrayList<CVEObject> list = new ArrayList<CVEObject>();
		list.add(data);

		return mySQLRepository.addNewCVEListToDatabase(list);
	}

	/**
	 * Calls Update method on repository
	 * 
	 * @param obj
	 * @throws SQLException
	 */
	public boolean updateRow(CVEObject obj,String oldProductName) throws SQLException {
		return mySQLRepository.updateRow(obj,oldProductName);
	}

	/**
	 * Deletes CVE in Repository
	 * 
	 * @param cve
	 * @throws SQLException
	 */
	public boolean deleteRow(String cve,String releaseName,String productName) throws SQLException  {
		return mySQLRepository.deleteCVE(cve,releaseName,productName);
	}

	/**
	 * Creates Output file
	 * 
	 * @param query
	 * @param formatter
	 * @param fileName
	 * @return
	 * @throws SQLException
	 */
	public String createOutputFile(String query, OutPutFormat formatter, String fileName,String releaseName) throws SQLException {
		return writeToFile.fileWriter(fileName, mySQLRepository.getSpecialQuery(query, formatter,releaseName));
	}

	/**
	 * validation of User Name and Password
	 * 
	 * @param userName
	 * @param password
	 * @return
	 */
	public boolean isUserValid(String userName, String password) {
		
		return mySQLRepository.isUserValid(userName, password);
	}

	public ArrayList<String> getReleasesName() {
		
		try {
			return mySQLRepository.getReleasesName();
		} catch (SQLException e) {
			return null;
		}
		
	}

	public ArrayList<CVEObject> getItem(CVEDataState state,String brancheName) {

		try {
			return mySQLRepository.getData(state, brancheName);
		} catch (SQLException e) {
			return null;
		}
	}
	public String addNewRelase(String relaseName){
		try {
			return mySQLRepository.addRelase(relaseName);
		} catch (SQLException e) {
		
			return null;
		}
	}

}
