package repository;

import java.io.FileWriter;
import java.security.Key;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import dataModels.DatabaseConnectionObject;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

public class WriteToFile {
	/**
	 * Write Data in to file
	 * 
	 * @param fileName
	 * @param data
	 * @return
	 */
	public String fileWriter(String fileName, String data) {
		try {
			FileWriter fw = new FileWriter(fileName);
			fw.write(data);
			fw.close();
			return fileName + " has been Created successfully";
		} catch (Exception ex) {
			return ex.getMessage();
		}

	}

	public String fileWriter(DatabaseConnectionObject obj) {
		try {
			obj.setPassword(encryptPassword(obj.getPassword()));
			FileWriter fw = new FileWriter("setting.txt");
			fw.write(obj.toString());
			fw.close();
			return "successfully has been written in setting.txt ";
		} catch (Exception ex) {
			return ex.getMessage();
		}

	}

	/***
	 * encrypt input string
	 * 
	 * @param password
	 * @return
	 */
	private String encryptPassword(String password) {
		Key key;
		String encryptedValue = "error";
		try {
			key = generateKey();
			Cipher c = Cipher.getInstance("AES");
			c.init(Cipher.ENCRYPT_MODE, key);
			byte[] encVal = c.doFinal(password.getBytes());
			encryptedValue = new BASE64Encoder().encode(encVal);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return encryptedValue;

	}

	/***
	 * Decrypt input String
	 * 
	 * @param encryptedData
	 * @return
	 */
	private String decrypPassword(String encryptedData) {

		Key key;
		String decryptedValue = "error";
		try {
			key = generateKey();
			Cipher c = Cipher.getInstance("AES");
			c.init(Cipher.DECRYPT_MODE, key);
			byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);
			byte[] decValue = c.doFinal(decordedValue);
			decryptedValue = new String(decValue);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return decryptedValue;
	}

	private static Key generateKey() throws Exception {
		byte[] keyValue = new byte[] { 'C', 'V', 'E', 'd', 'a', 't', 'a', 'b', 'a', 's', 'e', '2', '0', '1', '7', '2' };
		Key key = new SecretKeySpec(keyValue, "AES");
		return key;
	}
}
