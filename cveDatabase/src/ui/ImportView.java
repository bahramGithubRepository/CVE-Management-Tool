package ui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Panel;
import java.awt.Window;
import java.awt.Dialog.ModalityType;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.io.File;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;

import dataModels.Message;
import services.ServiceLayer;

/**
 * Import Window
 * 
 * @author Mr Bahram
 *
 */
public class ImportView extends JPanel implements ActionListener {
	public static Message message=new Message("NotEnd");
	private JButton insert;
	private JTextArea output,infromation;
	public boolean isUpdated = true;
	Font font = new Font("Arial", Font.PLAIN, 20);
	ImageIcon loading = new ImageIcon("logo/loader.gif");
	JLabel lbLodingImage = new JLabel("", loading, JLabel.LEFT);
	JLabel waitText = new JLabel("Please waite ...");
	private JComboBox<String> branchesComboBox;
	private List<String> branchesName;
	private ServiceLayer services = new ServiceLayer();
	Thread	tw;

	/**
	 * Default Constructor
	 */
	public ImportView() {
		initMain();
	}

	/**
	 * Creates Windows
	 */
	public void initMain() {
		setLayout(new BorderLayout());
		JPanel panel = new JPanel();
		branchesName=services.getBranchesName();
		if(branchesName==null){
			reConnect();
			branchesName=services.getBranchesName();
			if(branchesName==null){
				JOptionPane.showMessageDialog(this, "Fail has been acquired in getting data from Database  ", "Error",
						JOptionPane.ERROR_MESSAGE);
				branchesName=new ArrayList<String>();

			}
		}
		branchesName.add(0,"");
		branchesComboBox=new JComboBox<String>(branchesName.toArray(new String[branchesName.size()]));
		branchesComboBox.addActionListener(this);
		branchesComboBox.setFont(font);
		JLabel txtBranches = new JLabel("Branches", SwingConstants.LEFT);
		txtBranches.setFont(font);
		txtBranches.setLabelFor(branchesComboBox);
		panel.add(txtBranches);
		panel.add(branchesComboBox);
		
		JLabel text = new JLabel("Open File", SwingConstants.LEFT);
		text.setFont(font);
		text.setLabelFor(insert);
		insert = new JButton("Open");
		insert.setFont(font);
		insert.addActionListener(this);
		insert.setEnabled(false);
		panel.add(text);
		panel.add(insert);

		waitText.setFont(font);
		waitText.setVisible(false);
		lbLodingImage.setVisible(false);
		panel.add(waitText);
		panel.add(lbLodingImage);
		String info="    This is an input format sample. please notice the order and format\n\n"
				+ "      PACKAGE NAME: flex\n"
				+ "      PACKAGE VERSION: 2.6.0\n"
				+ "      CVE: CVE-2016-6354\n"
				+ "      CVE STATUS: Patched\n"
				+ "      CVE SUMMARY: Heap-based buffer overflow in the yy_get_next_buffer\n"
				+ "      CVSS v2 BASE SCORE: 7.5\n"
				+ "      VECTOR: NETWORK\n"
				+ "      MORE INFORMATION: https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-6354\n";
		
		infromation=new JTextArea(info);
		infromation.setEditable(false);
		infromation.setFont(new Font("Arial", Font.BOLD, 12));
		infromation.setBackground(new Color(210, 204, 203));

		
		JScrollPane scInformation=new JScrollPane(infromation);
		
		Panel pNorth=new Panel(new BorderLayout());

		pNorth.add(panel, BorderLayout.SOUTH);
		pNorth.add(scInformation, BorderLayout.CENTER);
		add(pNorth, BorderLayout.NORTH);
		output = new JTextArea();
		JScrollPane scroll = new JScrollPane(output);
		output.setEditable(false);
		scroll.getVerticalScrollBar().addAdjustmentListener(new AdjustmentListener()
		{
			@Override
			public void adjustmentValueChanged(AdjustmentEvent arg0) {
				output.select(output.getHeight()*font.getSize() ,0);
				
			}
			}
			);
		output.setFont(new Font("Arial", Font.BOLD, 16));

		add(scroll, BorderLayout.CENTER);
		setPreferredSize(new Dimension(800, 600));

	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == insert) {
			output.setText("");
			message.setMessage("NotEND");
			String selectedBranche= branchesComboBox.getSelectedItem().toString();
			JFileChooser fileChooser = new JFileChooser();
			fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
			fileChooser.setAcceptAllFileFilterUsed(false);
			fileChooser.addChoosableFileFilter(new FileFilter() {

				public String getDescription() {
					return "TXT Documents (*.txt)";
				}

				public boolean accept(File f) {
					if (f.isDirectory()) {
						return true;
					} else {
						return f.getName().toLowerCase().endsWith(".txt");
					}
				}
			});
			int result = fileChooser.showOpenDialog(this);
			if (result == JFileChooser.APPROVE_OPTION) {
				File selectedFile = fileChooser.getSelectedFile();

				waitText.setVisible(true);
				lbLodingImage.setVisible(true);
				
//				-----------------
				services.readfile(selectedFile.getAbsolutePath(),selectedBranche, message);
				
				tw=  new Thread(){
					
		    		@Override
		    		public void run() {
		    			
		    			while(!message.getMessage().equals("End")){
		    				 synchronized (message) {
		    					 
		    		                try{
		    		                    
		    		                	message.wait();
		    		                }catch(InterruptedException e){
		    		                    e.printStackTrace();
		    		                }
		    		                if(message.getMessage().equals("Connection Error")){
		    		                	if(reConnect()){
		    		                		services.readfile(selectedFile.getAbsolutePath(),selectedBranche, message);
		    		                	}else{
		    		                		JOptionPane.showMessageDialog(ImportView.this,
													"The Application can't access to database. ", "Connection Error",
													JOptionPane.ERROR_MESSAGE);
		    		                		message.setMessage("End");
		    		                		isUpdated=false;
		    		                	}
		    		                }
		    		                output.setText(output.getText() + "\n" + message.getMessage());
		    		            }
		    			}
		    			
		    			waitText.setVisible(false);
						lbLodingImage.setVisible(false);
						tw.stop();
						
		    		}
		    		
		    	};
		    	tw.start();
		    	

			}
		}else if (e.getActionCommand().equals("comboBoxChanged")){
			insert.setEnabled(true);
			String item=branchesComboBox.getSelectedItem().toString();
			if(branchesName.get(0)==""){
				branchesName.remove(0);
				
				branchesComboBox.removeAllItems();
				for (String string : branchesName) {
					branchesComboBox.addItem(string);
				}
				branchesComboBox.setSelectedItem(item);
			}
			
			
		}
	}

	/**
	 * Reconnect to database
	 * 
	 * @return
	 */
	private boolean reConnect() {

		boolean reconnect = true;
		UIManager.put("OptionPane.messageFont", font);
		UIManager.put("OptionPane.buttonFont", font);
		JDialog dialog = null;

		ReConnectView reConnectView = new ReConnectView();
		Window win = SwingUtilities.getWindowAncestor(this);

		dialog = new JDialog(win, "Re-Connect in MySQL Database", ModalityType.APPLICATION_MODAL);
		dialog.getContentPane().add(reConnectView);
		dialog.pack();
		dialog.setLocationRelativeTo(null);

		dialog.setVisible(true);

		reconnect = reConnectView.isConnected;
		return reconnect;
	}

}
