package ui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Window;
import java.awt.Dialog.ModalityType;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.ScrollPaneConstants;
import javax.swing.SortOrder;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import dataModels.CVEObject;
import dataModels.CVEObject.SettingMode;
import dataModels.CVEObject.CVEDataState;
import services.ServiceLayer;

/**
 * Main Window
 * 
 * @author Mr Bahram
 *
 */
public class MainUI extends JFrame implements ActionListener, MouseListener {
	static MainUI ui;

	private JMenuBar menuBar;
	private JMenu menu;
	private JMenuItem menuItemInsert, menuItemExport,menuItemNewRelease;
	private JMenuItem menuItemExit, menuItemSetting;
	private JRadioButton showAll;
	private JRadioButton showNew;
	private JComboBox<String> branchesComboBox;
	private JTable table;
	private TableRowSorter<TableModel> sorter;
	private JButton addNew = new JButton("+");
	private DefaultTableModel model;
	private JDialog dialog;
	public final static String VER = "Ver 3.0.2";
	private JTextField search = new JTextField();
	private SettingMode MODE;
	Font font = new Font("Arial", Font.PLAIN, 20);

	private ServiceLayer services = new ServiceLayer();

	public static List<String> branchesName;//new ArrayList<String>();
	/**
	 * Constructor
	 * 
	 * @param mode
	 */
	public MainUI(SettingMode mode) {
		MODE = mode;

		boolean isConnected = services.connectToDatabse();
		if (!isConnected) {
			SettingView settingView = new SettingView();
			Window win = SwingUtilities.getWindowAncestor(this);

			if (win == null) {
				dialog = new JDialog(win, "Settings   Standard TCP/IP", ModalityType.APPLICATION_MODAL);
				dialog.getContentPane().add(settingView);
				dialog.pack();
				dialog.setLocationRelativeTo(null);
			}

			dialog.setVisible(true);

			System.exit(0);

		} else {
			branchesName=services.getReleasesName();
			if(branchesName==null){
				reConnect();
				branchesName=services.getReleasesName();
				if(branchesName==null){
					JOptionPane.showMessageDialog(this, "Fail has been acquired in getting data from Database  ", "Error",
							JOptionPane.ERROR_MESSAGE);
					branchesName=new ArrayList<String>();

				}
			}
			initialMethod();
			
			if (showAll.isSelected())
				getData(CVEDataState.ALL);	
			else getData(CVEDataState.NEW);
		}

	}
	
	

	/**
	 * Creates Windows
	 */
	private void initialMethod() {
		setTitle("CVE Management tool " + VER);
		setLayout(null);
		setPreferredSize(new Dimension(1230, 1000));
		pack();
		setVisible(true);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		initMenu();
		JPanel panelNorth = initNorthOfFrame();
		panelNorth.setBounds(130, 0, 1050, 100);
		add(panelNorth);
		JPanel panelCenter = initCenterOfFrame();
		panelCenter.setBounds(130, 110, 1050, 780);
		add(panelCenter);

		JPanel westPanel = initWestOfFrame();
		westPanel.setBounds(10, 250, 110, 300);
		add(westPanel);

	}

	/**
	 * Creates Center Panel
	 * 
	 * @return
	 */
	private JPanel initCenterOfFrame() {
		JPanel panelMain = new JPanel(new GridLayout(1, 1));
		
		Object columnNames[] = { "CVE", "Score", "Product", "Master", branchesComboBox.getSelectedItem(), "Description",
				"Affected Version" };
		model = new DefaultTableModel(columnNames, 0) {
			public Class getColumnClass(int column) {
				if (model.getRowCount() == 0)
					return Object.class;
				return getValueAt(0, column).getClass();
			}
		};

		table = new JTable(model) {
			public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
				Component c = super.prepareRenderer(renderer, row, column);

				// Color row based on a cell value

				if (!isRowSelected(row)) {
					c.setBackground(getBackground());

					int modelRow = convertRowIndexToModel(row);
					if (!getModel().getValueAt(modelRow, 1).toString().isEmpty()) {

						String score = (String) getModel().getValueAt(modelRow, 1);
						if (score.equals("Critical"))
							c.setBackground(new Color(255, 105, 180));
						else if (score.equals("High"))
							c.setBackground(new Color(255, 165, 0));
						else if (score.equals("Medium"))
							c.setBackground(new Color(255, 255, 0));
						else
							c.setBackground(new Color(240, 255, 240));
					}
				}

				return c;
			}

			@Override
			public boolean isCellEditable(int row, int col) {
				return false;
			}
		};
		DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
		centerRenderer.setHorizontalAlignment(JLabel.CENTER);
		table.setDefaultRenderer(String.class, centerRenderer);
		sorter = new TableRowSorter<TableModel>(table.getModel());
		table.setRowSorter(sorter);
		List<RowSorter.SortKey> sortKeys = new ArrayList<>(25);
		sortKeys.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));
		sorter.setSortKeys(sortKeys);
		
		// add sort format for column 0 
		sorter.setComparator(0, new Comparator<String>() {
			 
		    @Override
		    public int compare(String name1, String name2) {
		    	String [] n2=name2.split("-");
		    	String [] n1=name1.split("-");
		    	//add format for sorting
		    	if(Integer.valueOf(n2[1].trim()).compareTo(Integer.valueOf(n1[1].trim()))==0){
		    		return Integer.valueOf(n2[2].trim()).compareTo(Integer.valueOf(n1[2].trim()));
		    	}else
		    		return Integer.valueOf(n2[1].trim()).compareTo(Integer.valueOf(n1[1].trim()));
		    }
		});
		sorter.sort();

		JScrollPane scrollPane = new JScrollPane(table);
		panelMain.add(scrollPane);



		table.addMouseListener(this);
		table.setFont(new Font("Arial", Font.PLAIN, 20));
		table.getTableHeader().setFont(new Font("Arial", Font.BOLD, 18));
		table.setRowHeight(40);
		table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

		resizeColumnWidth(table);
		return panelMain;
	}

	/**
	 * Creates the North Panel
	 * 
	 * @return
	 */
	private JPanel initNorthOfFrame() {
		JPanel panelMain = new JPanel(new GridLayout(2, 1));
		JPanel panel = new JPanel(new GridLayout(1, 3));
		JPanel leftPanel = new JPanel();
		ButtonGroup group = new ButtonGroup();
		showNew = new JRadioButton("SHow New Items");
		group.add(showNew);
		showNew.setSelected(true);
		showNew.setFont(new Font("Arial", Font.PLAIN, 20));
		showNew.addActionListener(this);
		leftPanel.add(showNew);
		showAll = new JRadioButton("Show All");
		showAll.addActionListener(this);
		showAll.setFont(new Font("Arial", Font.PLAIN, 20));
		leftPanel.add(showAll);
		group.add(showAll);
		panel.add(leftPanel);
		
		
		JPanel centerPanel = new JPanel();
		JLabel lblBranches=new JLabel("Releases");
		lblBranches.setFont(font);
		centerPanel.add(lblBranches);
		branchesComboBox=new JComboBox<String>(branchesName.toArray(new String[branchesName.size()]));
		branchesComboBox.addActionListener(this);
		branchesComboBox.setFont(font);
		centerPanel.add(branchesComboBox);
		
		panel.add(centerPanel);

		
		search.setFont(new Font("Arial", Font.PLAIN, 20));
		search.setPreferredSize(new Dimension(200, 35));
		search.getDocument().addDocumentListener(new DocumentListener() {

			public void insertUpdate(DocumentEvent e) {
				String text = search.getText();

				if (text.trim().length() == 0) {
					sorter.setRowFilter(null);
				} else {
					sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text, 0));
				}
			}

			public void removeUpdate(DocumentEvent e) {
				String text = search.getText();

				if (text.trim().length() == 0) {
					sorter.setRowFilter(null);
				} else {
					sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text, 0));
				}
			}

			public void changedUpdate(DocumentEvent e) {
				throw new UnsupportedOperationException("Not supported yet.");
			}

		});

		JPanel searchPanel = new JPanel();
		JLabel lblSearch = new JLabel();
		lblSearch.setIcon(new ImageIcon("logo/search.png"));
		lblSearch.setPreferredSize(new Dimension(50, 50));
		searchPanel.add(search);
		searchPanel.add(lblSearch);

		panel.add(searchPanel);
		addNew.setFont(new Font("Arial", Font.PLAIN, 30));
		addNew.addActionListener(this);
		addNew.setMaximumSize(new Dimension(50, 80));
		if (MODE == SettingMode.USER)
			addNew.setEnabled(false);
		searchPanel.add(addNew);

		JLabel lbl = new JLabel("CVE Management Tool " + VER, JLabel.CENTER);
		lbl.setFont(new Font("Arial", Font.PLAIN, 20));
		panelMain.add(lbl);
		panelMain.add(panel);
		return panelMain;
	}

	/**
	 * Create the West Panel
	 * 
	 * @return
	 */
	private JPanel initWestOfFrame() {
		JPanel panel = new JPanel();

		panel.setLayout(new GridLayout(12, 1));
		Font font = new Font("Arial", Font.PLAIN, 17);

		JLabel critical = new JLabel("Critical");
		JLabel critical_1 = new JLabel("Score 9-10");
		critical.setFont(font);
		JButton criticalColor = new JButton("   		");
		criticalColor.setBackground(new Color(255, 105, 180));
		criticalColor.setEnabled(false);
		panel.add(criticalColor);
		panel.add(critical);
		panel.add(critical_1);

		JLabel high = new JLabel("High");
		JLabel high_1 = new JLabel("Score 7-8.9");
		high.setFont(font);
		JButton highColor = new JButton("   		");
		highColor.setBackground(new Color(255, 165, 0));
		highColor.setEnabled(false);
		panel.add(highColor);
		panel.add(high);
		panel.add(high_1);

		JLabel medium = new JLabel("Medium");
		JLabel medium_1 = new JLabel("Score 4-6.9");
		medium.setFont(font);
		JButton mediumColor = new JButton(" 	 	 ");
		mediumColor.setBackground(new Color(255, 255, 0));
		mediumColor.setEnabled(false);
		panel.add(mediumColor);
		panel.add(medium);
		panel.add(medium_1);

		JLabel minor = new JLabel("Minor");
		JLabel minor_1 = new JLabel("Score 0-3.9");
		minor.setFont(font);
		JButton minorColor = new JButton(" 		  ");
		minorColor.setBackground(new Color(240, 255, 240));
		minorColor.setEnabled(false);
		panel.add(minorColor);
		panel.add(minor);
		panel.add(minor_1);

		return panel;
	}

	/**
	 * Menu bar
	 */
	private void initMenu() {
		// Create the menu bar.

		menuBar = new JMenuBar();
		menuBar.setFont(new Font("Arial", Font.PLAIN, 20));

		// Build the first menu.
		menu = new JMenu("File");
		menu.setFont(font);
		menu.setMnemonic(KeyEvent.VK_F);
		menu.getAccessibleContext().setAccessibleDescription("File Menu");
		menuBar.add(menu);

		// a group of JMenuItems
		// -------------------------------------------------
		menuItemNewRelease = new JMenuItem("New Release", KeyEvent.VK_N);
		menuItemNewRelease.setFont(font);
		menuItemNewRelease.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, ActionEvent.ALT_MASK));
		menuItemNewRelease.getAccessibleContext().setAccessibleDescription("Add a new release");
		menuItemNewRelease.addActionListener(this);
		if (MODE == SettingMode.USER)
			menuItemNewRelease.setEnabled(false);
		menu.add(menuItemNewRelease);
		// -----------------------------------------------------
		menu.addSeparator();
		//------------------------------------------------------
		menuItemInsert = new JMenuItem("Import", KeyEvent.VK_I);
		menuItemInsert.setFont(font);
		menuItemInsert.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_I, ActionEvent.ALT_MASK));
		menuItemInsert.getAccessibleContext().setAccessibleDescription("Import new file to the Database");
		menuItemInsert.addActionListener(this);
		if (MODE == SettingMode.USER)
			menuItemInsert.setEnabled(false);
		menu.add(menuItemInsert);
		// -------------------------------------------------
		menuItemExport = new JMenuItem("Export", KeyEvent.VK_E);
		menuItemExport.setFont(font);
		menuItemExport.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E, ActionEvent.ALT_MASK));
		menuItemExport.getAccessibleContext().setAccessibleDescription("Export into a new file");
		menuItemExport.addActionListener(this);
		menu.add(menuItemExport);
		// -----------------------------------------------------
		menu.addSeparator();
		menuItemSetting = new JMenuItem("Sttings", KeyEvent.VK_S);
		menuItemSetting.setFont(font);

		menuItemSetting.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
		menuItemSetting.addActionListener(this);
		if (MODE == SettingMode.USER)
			menuItemSetting.setEnabled(false);
		menu.add(menuItemSetting);

		// ----------------------------------------------------------------

		menu.addSeparator();
		menuItemExit = new JMenuItem("Exit", KeyEvent.VK_X);
		menuItemExit.setFont(font);

		menuItemExit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, ActionEvent.ALT_MASK));
		menuItemExit.addActionListener(this);
		menu.add(menuItemExit);

		setJMenuBar(menuBar);
	}

	@Override
	public void actionPerformed(ActionEvent event) {
		System.out.println(event.getActionCommand());
		
		
		if (event.getActionCommand().equals("New Release")) {
			System.out.println("New Release");
			AddNewReleaseView addNewReleas=new AddNewReleaseView();
			Window win = SwingUtilities.getWindowAncestor(this);

			if (win == null) {
				dialog = new JDialog(win, "add new release", ModalityType.APPLICATION_MODAL);
				dialog.getContentPane().add(addNewReleas);
				dialog.pack();
				dialog.setLocationRelativeTo(null);
			}

			dialog.setVisible(true);
			// update list
			
			if (addNewReleas.isGEnerated) {
				branchesComboBox.addItem(addNewReleas.branchName);
				branchesComboBox.setSelectedItem(addNewReleas.branchName);
				
				if (showAll.isSelected())
					getData(CVEDataState.ALL);	
				else getData(CVEDataState.NEW);
				
				resizeColumnWidth(table);
			}
		}else if (event.getActionCommand().equals("Import")) {
			System.out.println("Import");
			ImportView insertView = new ImportView();
			Window win = SwingUtilities.getWindowAncestor(this);

			if (win == null) {
				dialog = new JDialog(win, "Import data from file", ModalityType.APPLICATION_MODAL);
				dialog.getContentPane().add(insertView);
				dialog.pack();
				dialog.setLocationRelativeTo(null);
			}

			dialog.setVisible(true);
			// update list

			if (insertView.isUpdated) {
				if (showNew.isSelected())
					getData(CVEDataState.NEW);
				else if (showAll.isSelected())
					getData(CVEDataState.ALL);
				resizeColumnWidth(table);
			}
		} else if (event.getActionCommand().equals("Export")) {
			System.out.println("Export");
			ExportView exportView = new ExportView();
			JScrollPane scrollForExportView = new JScrollPane(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,
					ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
			scrollForExportView.getViewport().add(exportView);
			scrollForExportView.setPreferredSize(new Dimension(1040, 1200));
			Window winExport = SwingUtilities.getWindowAncestor(this);

			if (winExport == null) {
				dialog = new JDialog(winExport, "Export data to file", ModalityType.APPLICATION_MODAL);
				dialog.getContentPane().add(scrollForExportView);
				dialog.pack();
				dialog.setLocationRelativeTo(null);
			}

			dialog.setVisible(true);
		} else if (event.getActionCommand().equals("Sttings")) {
			System.out.println("Sttings");
			SettingView settingView = new SettingView();
			Window win = SwingUtilities.getWindowAncestor(this);

			if (win == null) {
				dialog = new JDialog(win, "Settings   Standard TCP/IP", ModalityType.APPLICATION_MODAL);
				dialog.getContentPane().add(settingView);
				dialog.pack();
				dialog.setLocationRelativeTo(null);
			}

			dialog.setVisible(true);
		} else if (event.getActionCommand().equals("Exit")) {
			System.out.println("Exit");

			System.exit(0);
		} else if (event.getActionCommand().equals("SHow New Items")) {

			getData(CVEDataState.NEW);

		} else if (event.getActionCommand().equals("Show All")) {

			getData(CVEDataState.ALL);
		}else if(event.getActionCommand().equals("comboBoxChanged")){
			System.out.println(branchesComboBox.getSelectedItem());
			table.getColumnModel().getColumn(4).setHeaderValue(branchesComboBox.getSelectedItem());
			if (showNew.isSelected())
				getData(CVEDataState.NEW);
			else if (showAll.isSelected())
				getData(CVEDataState.ALL);
			resizeColumnWidth(table);
			
		} else if (event.getActionCommand().equals("+")) {

			ArrayList<String> productList=null;
			
			try {
				productList=services.getProductList();
			} catch (SQLException e1) {
				if (reConnect()) {
					try {
						productList=services.getProductList();
					} catch (SQLException e2) {
						JOptionPane.showMessageDialog(this, "The Application can't access to database. ",
								"Connection Error", JOptionPane.ERROR_MESSAGE);

					}
				}
			}
			
			if (productList!=null) {
				EditRow editRow = new EditRow(branchesComboBox.getSelectedItem().toString(),productList);
				Window win = SwingUtilities.getWindowAncestor(this);
	
				if (win == null) {
					dialog = new JDialog(win, "Add new value ", ModalityType.APPLICATION_MODAL);
					dialog.getContentPane().add(editRow);
					dialog.pack();
					dialog.setLocationRelativeTo(null);
				}
	
				dialog.setVisible(true);
				if (editRow.isEdited) {
					if (showNew.isSelected())
						getData(CVEDataState.NEW);
					else if (showAll.isSelected())
						getData(CVEDataState.ALL);
					resizeColumnWidth(table);
				}

			}else{
				JOptionPane.showMessageDialog(this, "Fail has been acquired in getting data from Database  ", "Error",
						JOptionPane.ERROR_MESSAGE);
			}
		}

	}

	/**
	 * Remove all data from model of table
	 */
	private void removeAllModelData() {
		model.setRowCount(0);

	}

	/**
	 * Gets data from service layer
	 * 
	 * @param methodType
	 */
	private void getData(CVEDataState methodType) {
		ArrayList<CVEObject> list = null;
		removeAllModelData();
		if (methodType == CVEDataState.NEW){
			
				list = services.getItem(CVEDataState.NEW,branchesComboBox.getSelectedItem().toString());
			if (list==null) {
				if (reConnect()) {
					
						list = services.getItem(CVEDataState.NEW,branchesComboBox.getSelectedItem().toString());
					if (list==null) {
						JOptionPane.showMessageDialog(this, "The Application can't access to database. ",
								"Connection Error", JOptionPane.ERROR_MESSAGE);

					}
				}
			}
		}else{
			
				list = services.getItem(CVEDataState.ALL,branchesComboBox.getSelectedItem().toString());
			if (list==null) {
				if (reConnect()) {
				
						list = services.getItem(CVEDataState.ALL,branchesComboBox.getSelectedItem().toString());
					if (list==null) {
						JOptionPane.showMessageDialog(this, "The Application can't access to database. ",
								"Connection Error", JOptionPane.ERROR_MESSAGE);

					}
				}
			}
		}
		if (list != null) {
			for (int i = 0; i < list.size(); i++) {
				Object[] row = { list.get(i).getCve(), fixScore(list.get(i).getScore()), list.get(i).getProduct(),
						convertCVEObjectValueToString(list.get(i).getMaster()),
						convertCVEObjectValueToString(list.get(i).getRelease()),
						 list.get(i).getDescription(),
						list.get(i).getComment() };
				model.addRow(row);
			}
			resizeColumnWidth(table);
		} else
			JOptionPane.showMessageDialog(this, "Fail has been acquired in getting data from Database  ", "Error",
					JOptionPane.ERROR_MESSAGE);
	}

	/**
	 * Resize Column
	 * 
	 * @param table
	 */
	private static void resizeColumnWidth(JTable table) {
		final TableColumnModel columnModel = table.getColumnModel();
		for (int column = 0; column < table.getColumnCount(); column++) {
			int width[] = { 60, 75, 90, 80, 75, 75, 120, 160 }; // Min width
			for (int row = 0; row < table.getRowCount(); row++) {
				TableCellRenderer renderer = table.getCellRenderer(row, column);
				Component comp = table.prepareRenderer(renderer, row, column);
				width[column] = Math.max(comp.getPreferredSize().width + 1, width[column]);

			}
			if (width[column] > 300)
				width[column] = 160;
			columnModel.getColumn(column).setPreferredWidth(width[column]);
		}
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		UIManager.put("OptionPane.messageFont", font);
		UIManager.put("OptionPane.buttonFont", font);
		if (e.getClickCount() == 2) {
			e.consume();
			JTable target = (JTable) e.getSource();
			int row = target.getSelectedRow();
			String cve = (String) table.getValueAt(row, 0);
			String productName=(String) table.getValueAt(row, 2);
			CVEObject selectedRowValu = null;
			ArrayList<String> productList=null;
			
			try {
				selectedRowValu = services.getCVE(cve,productName,branchesComboBox.getSelectedItem().toString());
				productList=services.getProductList();
			} catch (SQLException e1) {
				if (reConnect()) {
					try {
						selectedRowValu = services.getCVE(cve,productName,branchesComboBox.getSelectedItem().toString());
						productList=services.getProductList();
					} catch (SQLException e2) {
						JOptionPane.showMessageDialog(this, "The Application can't access to database. ",
								"Connection Error", JOptionPane.ERROR_MESSAGE);

					}
				}
			}
			
			if (selectedRowValu != null && !selectedRowValu.getCve().isEmpty()&&productList!=null) {
				selectedRowValu.setReleaseName(branchesComboBox.getSelectedItem().toString());
				EditRow editRow = new EditRow(selectedRowValu, MODE,productList);
				Window win = SwingUtilities.getWindowAncestor(this);

				if (win == null) {
					dialog = new JDialog(win, "Edited valu of " + selectedRowValu.getCve(),
							ModalityType.APPLICATION_MODAL);
					dialog.getContentPane().add(editRow);
					dialog.pack();
					dialog.setLocationRelativeTo(null);
				}

				dialog.setVisible(true);
				if (editRow.isEdited) {
					if (showNew.isSelected())
						getData(CVEDataState.NEW);
					else if (showAll.isSelected())
						getData(CVEDataState.ALL);
					resizeColumnWidth(table);
				}
			} else if (selectedRowValu.getCve().isEmpty())
				JOptionPane.showMessageDialog(this, "The cve " + cve + " not found in database", "Error",
						JOptionPane.ERROR_MESSAGE);
			else
				JOptionPane.showMessageDialog(this, "Fail has been acquired in getting data from Database  ", "Error",
						JOptionPane.ERROR_MESSAGE);

		}
	}

	@Override
	public void mouseEntered(MouseEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseExited(MouseEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mousePressed(MouseEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseReleased(MouseEvent arg0) {
		// TODO Auto-generated method stub

	}

	/**
	 * Convert String To CVE Object Value
	 * 
	 * @param text
	 * @return
	 */
	private CVEObject.ColumnValues convertStringToCVEObjectValue(String text) {
		if (CVEObject.ColumnValues.Fixed.toString().equals(text))
			return CVEObject.ColumnValues.Fixed;
		else if (CVEObject.ColumnValues.NotFixed.toString().equals(text))
			return CVEObject.ColumnValues.NotFixed;
		else if (CVEObject.ColumnValues.Unknown.toString().equals(text))
			return CVEObject.ColumnValues.Unknown;
		else
			return CVEObject.ColumnValues.NA;
	}

	/**
	 * Convert double score value to related string value
	 * 
	 * @param score
	 * @return
	 */
	private String fixScore(double score) {

		if (score >= 9)
			return "Critical";
		else if (score >= 7 && score < 9)
			return "High";
		else if (score >= 4 && score < 7)
			return "Medium";
		else if (score >= 0 && score < 4)
			return "Minor";
		else
			return "";
	}

	/**
	 * reconect to database
	 * 
	 * @return
	 */
	private boolean reConnect() {

		boolean reconnect = true;
		UIManager.put("OptionPane.messageFont", font);
		UIManager.put("OptionPane.buttonFont", font);
		JDialog dialog = null;

		ReConnectView reConnectView = new ReConnectView();
		Window win = SwingUtilities.getWindowAncestor(this);

		dialog = new JDialog(win, "Re-Connect in MySQL Database", ModalityType.APPLICATION_MODAL);
		dialog.getContentPane().add(reConnectView);
		dialog.pack();
		dialog.setLocationRelativeTo(null);

		dialog.setVisible(true);

		reconnect = reConnectView.isConnected;
		return reconnect;
	}

	/**
	 * Convert CVE Object Value To String
	 * 
	 * @param value
	 * @return
	 */
	private String convertCVEObjectValueToString(CVEObject.ColumnValues value) {
		if (!value.equals(CVEObject.ColumnValues.Empty))
			return value.toString();
		else
			return "";
	}
}
