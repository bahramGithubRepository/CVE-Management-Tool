	package ui;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Window;
import java.awt.Dialog.ModalityType;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSpinner;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import dataModels.CVEObject;
import dataModels.OutPutFormat;
import services.ServiceLayer;

/**
 * Export window
 * 
 * @author Mr Bahram
 *
 */
public class ExportView extends JPanel implements ActionListener {

	Font font = new Font("Arial", Font.PLAIN, 20);
	private ServiceLayer service = new ServiceLayer();
	private JCheckBox CheckAll, checkCVE, checkProduct, checkScore, checkMaster, checkEL7, checkDescription,
			checkHyprlink;//,checkEL7_1
	private JCheckBox checkCVECondition, checkProductCondition, checkScoreCondition, checkMasterCondition,
			checkBranchCondition; //checkEL7_1Condition;
	private JCheckBox checkAddColumnNameForOutput, checkCVEForOutput, checkProductForOutput, checkScoreForOutput,
			checkMasterForOutput, checkBrancheForOutput, checkDescriptionForOutput,
			checkHyprlinkForOutput;//checkEL7_1ForOutput
	private JTextField cveValueInCondition;
	private JComboBox<String> productValuInCondition;
	private JSpinner spinderScore;
	private JComboBox<String> comboBoxMaster, comboBoxBranchesCondition,  comboBoxScoreSigne,comboBoxBranches;//comboBoxEL7_1
	private JComboBox<String> comboBoxSeparationBetweenNameAndColumn, comboBoxSeparationBetweencolumns;
	private JButton generate, seeOutputResult, saveTofile;
	private JTextArea queryResult, outPutResult;
	private JLabel txtBranches,lblAnd4;
	private List<String> branchesName;
	private ArrayList<String> productList;

	/**
	 * Default Constructor for creating UI
	 */
	public ExportView() {
		setPreferredSize(new Dimension(1050, 2000));
		setLayout(null);
		JLabel lblSelect = new JLabel("Select Output columns");
		lblSelect.setBounds(20, 10, 200, 35);
		lblSelect.setFont(font);
		add(lblSelect);

		String[] comboValues = new String[CVEObject.ColumnValues.values().length];
		for (int i = 0; i < CVEObject.ColumnValues.values().length; i++)
			comboValues[i] = CVEObject.ColumnValues.values()[i].name().toString();

		// set All select checkBox
		CheckAll = new JCheckBox("All");
		CheckAll.setFont(font);
		CheckAll.setBounds(20, 60, 50, 35);
		CheckAll.setSelected(true);
		CheckAll.addActionListener(this);
		add(CheckAll);

		checkCVE = new JCheckBox("CVE");
		checkCVE.setFont(font);
		checkCVE.setBounds(90, 60, 70, 35);
		checkCVE.setEnabled(false);
		add(checkCVE);

		checkScore = new JCheckBox("Score");
		checkScore.setFont(font);
		checkScore.setBounds(180, 60, 80, 35);
		checkScore.setEnabled(false);
		add(checkScore);

		checkProduct = new JCheckBox("Product");
		checkProduct.setFont(font);
		checkProduct.setBounds(280, 60, 100, 35);
		checkProduct.setEnabled(false);
		add(checkProduct);

		checkMaster = new JCheckBox("Master");
		checkMaster.setFont(font);
		checkMaster.setBounds(400, 60, 100, 35);
		checkMaster.setEnabled(false);
		add(checkMaster);
		
		txtBranches=new JLabel("Branches");
		txtBranches.setFont(font);
		txtBranches.setEnabled(true);
		txtBranches.setBounds(500, 60, 100, 35);
		add(txtBranches);

		branchesName=service.getBranchesName();
		if(branchesName==null){
			reConnect();
			branchesName=service.getBranchesName();
			if(branchesName==null){
				JOptionPane.showMessageDialog(this, "Fail has been acquired in getting data from Database  ", "Error",
						JOptionPane.ERROR_MESSAGE);
				branchesName=new ArrayList<String>();

			}
		}
		try{
			productList=service.getProductList();	
		}catch(SQLException e){
			if (reConnect()) {
				try {
					productList=service.getProductList();
				} catch (SQLException e2) {
					JOptionPane.showMessageDialog(this, "The Application can't access to database. ",
							"Connection Error", JOptionPane.ERROR_MESSAGE);

				}
			}
		}
		
		
		branchesName.add(branchesName.size(),"Master");
		comboBoxBranches = new JComboBox<>(branchesName.toArray(new String[branchesName.size()]));
		comboBoxBranches.setFont(font);
		comboBoxBranches.setEnabled(true);
		txtBranches.setLabelFor(comboBoxBranches);
		comboBoxBranches.setBounds(600, 60, 130, 35);
		comboBoxBranches.addActionListener(this);
		add(comboBoxBranches);
		
		checkEL7 = new JCheckBox("EL7.0");
		checkEL7.setFont(font);
		checkEL7.setEnabled(false);

		checkDescription = new JCheckBox("Description");
		checkDescription.setFont(font);
		checkDescription.setBounds(740, 60, 150, 35);
		checkDescription.setEnabled(false);
		add(checkDescription);

		checkHyprlink = new JCheckBox("Hyperlink");
		checkHyprlink.setFont(font);
		checkHyprlink.setBounds(890, 60, 150, 35);
		checkHyprlink.setEnabled(false);
		add(checkHyprlink);

		JLabel lblCondition = new JLabel("Conditions...");
		lblCondition.setBounds(20, 110, 200, 35);
		lblCondition.setFont(font);
		add(lblCondition);

		// condition row 1
		checkCVECondition = new JCheckBox("Is CVE   Value=");
		checkCVECondition.setFont(font);
		checkCVECondition.setBounds(150, 160, 220, 35);
		checkCVECondition.addActionListener(this);
		add(checkCVECondition);

		cveValueInCondition = new JTextField();
		cveValueInCondition.setFont(font);
		cveValueInCondition.setEnabled(false);
		cveValueInCondition.setBounds(380, 160, 250, 35);
		add(cveValueInCondition);

		JLabel lblAnd1 = new JLabel("and");
		lblAnd1.setBounds(100, 210, 50, 35);
		lblAnd1.setFont(font);
		add(lblAnd1);

		// row 2 condition
		checkScoreCondition = new JCheckBox("Is Score   Value");
		checkScoreCondition.setFont(font);
		checkScoreCondition.setBounds(150, 260, 220, 35);
		checkScoreCondition.addActionListener(this);
		add(checkScoreCondition);

		comboBoxScoreSigne = new JComboBox<>(new String[] { "=", "<=", ">=", "<", ">" });
		comboBoxScoreSigne.setFont(font);
		comboBoxScoreSigne.setEnabled(false);
		comboBoxScoreSigne.setBounds(380, 260, 100, 35);
		add(comboBoxScoreSigne);

		SpinnerNumberModel model = new SpinnerNumberModel(5, 0.0, 10.0, 0.1);
		spinderScore = new JSpinner(model);
		spinderScore.setFont(font);
		spinderScore.setEnabled(false);
		spinderScore.setBounds(490, 260, 100, 35);
		add(spinderScore);

		JLabel lblAnd2 = new JLabel("and");
		lblAnd2.setBounds(100, 310, 50, 35);
		lblAnd2.setFont(font);
		add(lblAnd2);

		// row 3 condition
		checkProductCondition = new JCheckBox("Is product Value=");
		checkProductCondition.setFont(font);
		checkProductCondition.setBounds(150, 360, 220, 35);
		checkProductCondition.addActionListener(this);
		add(checkProductCondition);

		productValuInCondition = new JComboBox<String>(productList.toArray(new String[productList.size()]));
		productValuInCondition.setFont(font);
		productValuInCondition.setEnabled(false);
		productValuInCondition.setBounds(380, 360, 250, 35);
		new JComboBoxAutoCompletion(productValuInCondition);
		add(productValuInCondition);

		JLabel lblAnd3 = new JLabel("and");
		lblAnd3.setBounds(100, 410, 50, 35);
		lblAnd3.setFont(font);
		add(lblAnd3);

		// row 4 condition

		checkMasterCondition = new JCheckBox("Is Master Value=");
		checkMasterCondition.setFont(font);
		checkMasterCondition.setBounds(150, 460, 220, 35);
		checkMasterCondition.addActionListener(this);
		add(checkMasterCondition);

		comboBoxMaster = new JComboBox<>(comboValues);
		comboBoxMaster.setFont(font);
		comboBoxMaster.setEnabled(false);
		comboBoxMaster.setBounds(380, 460, 250, 35);
		add(comboBoxMaster);

		lblAnd4 = new JLabel("and");
		lblAnd4.setBounds(100, 510, 50, 35);
		lblAnd4.setFont(font);
		add(lblAnd4);

		// row 5 condition

		checkBranchCondition = new JCheckBox("Is "+comboBoxBranches.getSelectedItem().toString()+" Value=");
		checkBranchCondition.setFont(font);
		checkBranchCondition.setBounds(150, 560, 220, 35);
		checkBranchCondition.addActionListener(this);
		add(checkBranchCondition);

		comboBoxBranchesCondition = new JComboBox<>(comboValues);
		comboBoxBranchesCondition.setFont(font);
		comboBoxBranchesCondition.setEnabled(false);
		comboBoxBranchesCondition.setBounds(380, 560, 250, 35);
		add(comboBoxBranchesCondition);



		// row 7

		generate = new JButton("Generate Quesry");
		generate.setFont(font);
		generate.setBounds(100, 710, 200, 35);
		generate.addActionListener(this);
		add(generate);

		// row 8

		queryResult = new JTextArea();
		queryResult.setEditable(false);
		queryResult.setFont(font);
		JScrollPane scroll = new JScrollPane(queryResult);
		scroll.setBounds(100, 760, 900, 350);
		add(scroll);

		// row 9
		JLabel lblOutPutFormat = new JLabel("Manage Output type");
		lblOutPutFormat.setBounds(20, 1120, 200, 35);
		lblOutPutFormat.setFont(font);
		add(lblOutPutFormat);
		// row 10
		checkAddColumnNameForOutput = new JCheckBox("Add Column Name");
		checkAddColumnNameForOutput.setFont(font);
		checkAddColumnNameForOutput.setBounds(60, 1170, 300, 35);
		checkAddColumnNameForOutput.setSelected(false);
		checkAddColumnNameForOutput.addActionListener(this);
		add(checkAddColumnNameForOutput);
		// row 11
		checkCVEForOutput = new JCheckBox("CVE");
		checkCVEForOutput.setFont(font);
		checkCVEForOutput.setBounds(100, 1220, 70, 35);
		checkCVEForOutput.setEnabled(false);
		add(checkCVEForOutput);

		checkScoreForOutput = new JCheckBox("Score");
		checkScoreForOutput.setFont(font);
		checkScoreForOutput.setBounds(180, 1220, 80, 35);
		checkScoreForOutput.setEnabled(false);
		add(checkScoreForOutput);

		checkProductForOutput = new JCheckBox("Product");
		checkProductForOutput.setFont(font);
		checkProductForOutput.setBounds(280, 1220, 100, 35);
		checkProductForOutput.setEnabled(false);
		add(checkProductForOutput);

		checkMasterForOutput = new JCheckBox("Master");
		checkMasterForOutput.setFont(font);
		checkMasterForOutput.setBounds(400, 1220, 100, 35);
		checkMasterForOutput.setEnabled(false);
		add(checkMasterForOutput);

		checkBrancheForOutput = new JCheckBox("Branche");
		checkBrancheForOutput.setFont(font);
		checkBrancheForOutput.setBounds(520, 1220, 150, 35);
		checkBrancheForOutput.setEnabled(false);
		add(checkBrancheForOutput);


		checkDescriptionForOutput = new JCheckBox("Description");
		checkDescriptionForOutput.setFont(font);
		checkDescriptionForOutput.setBounds(720, 1220, 150, 35);
		checkDescriptionForOutput.setEnabled(false);
		add(checkDescriptionForOutput);

		checkHyprlinkForOutput = new JCheckBox("Hyperlink");
		checkHyprlinkForOutput.setFont(font);
		checkHyprlinkForOutput.setBounds(890, 1220, 150, 35);
		checkHyprlinkForOutput.setEnabled(false);
		add(checkHyprlinkForOutput);

		// row 12
		JLabel lblSeparationBetweenNameAndColumn = new JLabel("select separation sign between Column name and value ");
		lblSeparationBetweenNameAndColumn.setFont(font);
		lblSeparationBetweenNameAndColumn.setBounds(100, 1270, 520, 35);
		lblSeparationBetweenNameAndColumn.setToolTipText("like Score:10.0 or Score=8.2");
		add(lblSeparationBetweenNameAndColumn);

		comboBoxSeparationBetweenNameAndColumn = new JComboBox<>(
				new String[] { ";", ":", "=", "White Space", ",", "New Line" });
		((JLabel) comboBoxSeparationBetweenNameAndColumn.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
		comboBoxSeparationBetweenNameAndColumn.setFont(font);
		comboBoxSeparationBetweenNameAndColumn.setEnabled(false);
		comboBoxSeparationBetweenNameAndColumn.setBounds(650, 1270, 145, 35);
		add(comboBoxSeparationBetweenNameAndColumn);

		// row 13
		JSeparator separator = new JSeparator(SwingConstants.HORIZONTAL);
		separator.setBounds(60, 1320, 900, 30);

		add(separator);

		// row 14

		JLabel lblSeparationBetweenCulomns = new JLabel("select separation sign between Columns ");
		lblSeparationBetweenCulomns.setFont(font);
		lblSeparationBetweenCulomns.setBounds(100, 1370, 360, 35);
		lblSeparationBetweenCulomns.setToolTipText("like Score:10.0;MAster:N/A");
		add(lblSeparationBetweenCulomns);

		comboBoxSeparationBetweencolumns = new JComboBox<>(
				new String[] { ";", ":", "=", "White Space", ",", "New Line" });
		((JLabel) comboBoxSeparationBetweencolumns.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
		comboBoxSeparationBetweencolumns.setFont(font);
		comboBoxSeparationBetweencolumns.setEnabled(true);
		comboBoxSeparationBetweencolumns.setBounds(490, 1370, 145, 35);
		add(comboBoxSeparationBetweencolumns);

		// row 15
		seeOutputResult = new JButton("Generate Output Result");
		seeOutputResult.setFont(font);
		seeOutputResult.setBounds(100, 1420, 250, 35);
		seeOutputResult.setEnabled(true);
		seeOutputResult.addActionListener(this);
		add(seeOutputResult);

		// row 16
		outPutResult = new JTextArea();
		outPutResult.setEditable(false);
		outPutResult.setFont(font);
		JScrollPane scrollOutput = new JScrollPane(outPutResult);
		scrollOutput.setBounds(100, 1470, 900, 350);
		add(scrollOutput);
		// row 17
		saveTofile = new JButton("Save to file");
		saveTofile.setFont(font);
		saveTofile.setBounds(100, 1870, 200, 35);
		saveTofile.setEnabled(false);
		saveTofile.addActionListener(this);
		add(saveTofile);

	}

	@Override
	public void actionPerformed(ActionEvent evnt) {
		System.out.println(evnt.getActionCommand() + " " + evnt.getSource().getClass().getSimpleName());
		if (evnt.getSource().getClass().getSimpleName().equals("JCheckBox") && evnt.getActionCommand().equals("All")) {
			if (CheckAll.isSelected()) {
				checkCVE.setEnabled(false);
				checkCVE.setSelected(false);
				checkScore.setEnabled(false);
				checkScore.setSelected(false);
				checkProduct.setEnabled(false);
				checkProduct.setSelected(false);
				checkMaster.setEnabled(false);
				checkMaster.setSelected(false);
				

				checkDescription.setEnabled(false);
				checkDescription.setSelected(false);
				checkHyprlink.setEnabled(false);
				checkHyprlink.setSelected(false);

			} else {
				checkCVE.setEnabled(false);
				checkCVE.setSelected(true);
				checkScore.setEnabled(true);
				checkProduct.setEnabled(true);
				checkMaster.setEnabled(true);

				checkDescription.setEnabled(true);
				checkHyprlink.setEnabled(true);

			}
		}else if(evnt.getActionCommand().equals("comboBoxChanged")){
		
			checkBranchCondition.setText("Is "+comboBoxBranches.getSelectedItem().toString()+" Value=");
			checkBrancheForOutput.setText(comboBoxBranches.getSelectedItem().toString());
			if(comboBoxBranches.getSelectedItem().equals("Master")){
				checkBranchCondition.setVisible(false);
				lblAnd4.setVisible(false);
				comboBoxBranchesCondition.setVisible(false);
				checkBrancheForOutput.setVisible(false);	
				checkMaster.setVisible(false);
			}else{
				checkBranchCondition.setVisible(true);
				lblAnd4.setVisible(true);
				comboBoxBranchesCondition.setVisible(true);
				checkBrancheForOutput.setVisible(true);
				checkMaster.setVisible(true);
			}
			
			
		}else if (evnt.getSource().getClass().getSimpleName().equals("JCheckBox")
				&& evnt.getActionCommand().equals("Is CVE   Value=")) {
			if (checkCVECondition.isSelected())
				cveValueInCondition.setEnabled(true);
			else {
				cveValueInCondition.setEnabled(false);
				cveValueInCondition.setText("");
			}
		} else if (evnt.getSource().getClass().getSimpleName().equals("JCheckBox")
				&& evnt.getActionCommand().equals("Is Score   Value")) {
			if (checkScoreCondition.isSelected()) {
				spinderScore.setEnabled(true);
				comboBoxScoreSigne.setEnabled(true);
			} else {
				spinderScore.setEnabled(false);
				comboBoxScoreSigne.setEnabled(false);

			}
		} else if (evnt.getSource().getClass().getSimpleName().equals("JCheckBox")
				&& evnt.getActionCommand().equals("Is product Value=")) {
			if (checkProductCondition.isSelected())
				productValuInCondition.setEnabled(true);
			else {
				productValuInCondition.setEnabled(false);
			}
		} else if (evnt.getSource().getClass().getSimpleName().equals("JCheckBox")
				&& evnt.getActionCommand().equals("Is Master Value=")) {
			if (checkMasterCondition.isSelected())
				comboBoxMaster.setEnabled(true);
			else {
				comboBoxMaster.setEnabled(false);
			}
		} else if (evnt.getSource().getClass().getSimpleName().equals("JCheckBox")
				&& evnt.getActionCommand().equals("Is "+comboBoxBranches.getSelectedItem().toString()+" Value=")) {
			if (checkBranchCondition.isSelected())
				comboBoxBranchesCondition.setEnabled(true);
			else {
				comboBoxBranchesCondition.setEnabled(false);
			}

		} else if (evnt.getSource().getClass().getSimpleName().equals("JButton")
				&& evnt.getActionCommand().equals("Generate Quesry")) {

			OutPutFormat formatter = new OutPutFormat();
			if (CheckAll.isSelected())
				formatter.setHyperlinkSelected(true);
			else
				formatter.setHyperlinkSelected(checkHyprlink.isSelected());
			String result = null;
			try {
				result = service.getSpecialItems(queryGenerator(), formatter,comboBoxBranches.getSelectedItem().toString());
			} catch (SQLException e) {
				if (reConnect()) {
					try {
						result = service.getSpecialItems(queryGenerator(), formatter,comboBoxBranches.getSelectedItem().toString());
					} catch (SQLException e2) {
						JOptionPane.showMessageDialog(this, "The Application can't access to database. ",
								"Connection Error", JOptionPane.ERROR_MESSAGE);

					}
				}
			}
			if (result != null) {
				queryResult.setText(result);
				saveTofile.setEnabled(true);
			} else
				JOptionPane.showMessageDialog(this, "Fail has been acquired in getting data from Database  ", "Error",
						JOptionPane.ERROR_MESSAGE);

		} else if (evnt.getSource().getClass().getSimpleName().equals("JCheckBox")
				&& evnt.getActionCommand().equals("Add Column Name")) {
			if (checkAddColumnNameForOutput.isSelected()) {
				if (CheckAll.isSelected()) {
					checkCVEForOutput.setEnabled(true);
					checkScoreForOutput.setEnabled(true);
					checkProductForOutput.setEnabled(true);
					checkMasterForOutput.setEnabled(true);
					checkBrancheForOutput.setEnabled(true);
					checkDescriptionForOutput.setEnabled(true);
					checkHyprlinkForOutput.setEnabled(true);
					comboBoxSeparationBetweenNameAndColumn.setEnabled(true);
				} else {
					checkCVEForOutput.setEnabled(checkCVE.isSelected());
					checkScoreForOutput.setEnabled(checkScore.isSelected());
					checkProductForOutput.setEnabled(checkProduct.isSelected());
					checkMasterForOutput.setEnabled(checkMaster.isSelected());
					checkBrancheForOutput.setEnabled(checkEL7.isSelected());
					checkDescriptionForOutput.setEnabled(checkDescription.isSelected());
					checkHyprlinkForOutput.setEnabled(checkHyprlink.isSelected());
					comboBoxSeparationBetweenNameAndColumn.setEnabled(true);
				}

			} else {
				checkCVEForOutput.setEnabled(false);
				checkCVEForOutput.setSelected(false);
				checkScoreForOutput.setEnabled(false);
				checkScoreForOutput.setSelected(false);
				checkProductForOutput.setEnabled(false);
				checkProductForOutput.setSelected(false);
				checkMasterForOutput.setEnabled(false);
				checkMasterForOutput.setSelected(false);
				checkBrancheForOutput.setEnabled(false);
				checkBrancheForOutput.setSelected(false);
				checkDescriptionForOutput.setEnabled(false);
				checkDescriptionForOutput.setSelected(false);
				checkHyprlinkForOutput.setEnabled(false);
				checkHyprlinkForOutput.setSelected(false);
				comboBoxSeparationBetweenNameAndColumn.setEnabled(false);
				comboBoxSeparationBetweenNameAndColumn.setEnabled(false);

			}

		} else if (evnt.getSource().getClass().getSimpleName().equals("JButton")
				&& evnt.getActionCommand().equals("Generate Output Result")) {

			String result = null;
			try {
				result = service.getSpecialItems(queryGenerator(), formaterGenerator(),comboBoxBranches.getSelectedItem().toString());
			} catch (SQLException e) {
				if (reConnect()) {
					try {
						result = service.getSpecialItems(queryGenerator(), formaterGenerator(),comboBoxBranches.getSelectedItem().toString());
					} catch (SQLException e2) {
						JOptionPane.showMessageDialog(this, "The Application can't access to database. ",
								"Connection Error", JOptionPane.ERROR_MESSAGE);

					}
				}
			}
			if (result != null)
				outPutResult.setText(result);
			else
				JOptionPane.showMessageDialog(this, "Fail has been acquired in getting data from Database  ", "Error",
						JOptionPane.ERROR_MESSAGE);

		} else if (evnt.getSource().getClass().getSimpleName().equals("JButton")
				&& evnt.getActionCommand().equals("Save to file")) {
			saveTofile.setEnabled(true);
			JFileChooser chooser = new JFileChooser();
			chooser.setFont(font);
			chooser.setCurrentDirectory(new File(System.getProperty("user.home")));
			chooser.addChoosableFileFilter(new FileFilter() {

				public String getDescription() {
					return "TXT Documents (*.txt)";
				}

				public boolean accept(File f) {
					if (f.isDirectory()) {
						return true;
					} else {
						return f.getName().toLowerCase().endsWith(".txt");
					}
				}
			});
			int retrival = chooser.showSaveDialog(null);
			if (retrival == JFileChooser.APPROVE_OPTION) {
				String fileName;
				if (hasFileNoExtension(chooser.getSelectedFile()))
					fileName = chooser.getSelectedFile().getPath() + ".txt";
				else
					fileName = chooser.getSelectedFile().getPath();

				String result = null;
				try {
					result = service.createOutputFile(queryGenerator(), formaterGenerator(), fileName,comboBoxBranches.getSelectedItem().toString());
				} catch (SQLException e) {
					if (reConnect()) {
						try {
							result = service.createOutputFile(queryGenerator(), formaterGenerator(), fileName,comboBoxBranches.getSelectedItem().toString());
						} catch (SQLException e2) {
							JOptionPane.showMessageDialog(this, "The Application can't access to database. ",
									"Connection Error", JOptionPane.ERROR_MESSAGE);

						}
					}
				}
				if (result != null) {
					UIManager.put("OptionPane.messageFont", font);
					UIManager.put("OptionPane.buttonFont", font);
					JOptionPane.showMessageDialog(this, result);
				} else
					JOptionPane.showMessageDialog(this, "Fail has been acquired in getting data from Database  ",
							"Error", JOptionPane.ERROR_MESSAGE);

			}
		}
	}

	/**
	 * GEnerate database query base on selected items
	 * 
	 * @return
	 */
	private String queryGenerator() {
		String outputColums = "select ";
		String selectedCondition = "";
		if (CheckAll.isSelected())
			outputColums += "cve_tb.cve_id as cve, package_tb.package_name  as product,cve_tb.score as score,"
				+ " cve_tb.description as description,cve_tb.affected_version as comments,"
				+ " master_tb.status as master,"+comboBoxBranches.getSelectedItem().toString()+"_tb.Status as "+comboBoxBranches.getSelectedItem().toString()+
				", "+comboBoxBranches.getSelectedItem().toString()+"_tb.edited as edited ";
		else {
			outputColums += "cve_tb.cve_id as cve ";
			if (checkScore.isSelected())
				outputColums += ",cve_tb.score as score";
			if (checkProduct.isSelected())
				outputColums += ",package_tb.package_name  as product";
			if (checkMaster.isSelected())
				outputColums += ", master_tb.status as master";
			outputColums +=","+comboBoxBranches.getSelectedItem().toString()+"_tb.status as "+comboBoxBranches.getSelectedItem().toString();
				 

			if (checkDescription.isSelected())
				outputColums += ",cve_tb.description as description";

		}

		System.out.println(outputColums);
		
		selectedCondition=" where cve_tb.cve_id="+comboBoxBranches.getSelectedItem().toString()+"_tb.cve_id and "
				+ "cve_tb.cve_id=master_tb.cve_id and "
				+ "cve_tb.cve_id=cve_package.cve_id and "
				+ "cve_package.package_id=package_tb.id and "
				+ "package_tb.id="+comboBoxBranches.getSelectedItem().toString()+"_tb.package_id ";
		if (checkCVECondition.isSelected())
			if (!cveValueInCondition.getText().isEmpty())
				selectedCondition += "and cve_tb.cve_id='" + cveValueInCondition.getText() + "'";

		if (checkScoreCondition.isSelected())

				selectedCondition += " and cve_tb.score" + comboBoxScoreSigne.getSelectedItem().toString()
						+ (double) Math.round(((Double) spinderScore.getModel().getValue()) * 100) / 100;

		if (checkProductCondition.isSelected())

					selectedCondition += " and package_tb.package_name='" + productValuInCondition.getSelectedItem().toString() + "'";

		if (checkMasterCondition.isSelected())

				selectedCondition += " and master_tb.status='"
						+ CVEObject.ColumnValues.values()[comboBoxMaster.getSelectedIndex()] + "'";

		if (checkBranchCondition.isSelected())

				selectedCondition += " and "+comboBoxBranches.getSelectedItem().toString()+
				"_tb.status='" + CVEObject.ColumnValues.values()[comboBoxBranchesCondition.getSelectedIndex()]+ "'";


		System.out.println(selectedCondition);

		return outputColums + " FROM master_tb, cve_tb ,package_tb ,cve_package, "+comboBoxBranches.getSelectedItem().toString()+"_tb " + selectedCondition;

	}

	/**
	 * define output format
	 * 
	 * @return
	 */
	private OutPutFormat formaterGenerator() {
		OutPutFormat formatter = new OutPutFormat();
		formatter.setCve(checkCVEForOutput.isSelected());
		formatter.setScore(checkScoreForOutput.isSelected());
		formatter.setProduct(checkProductForOutput.isSelected());
		formatter.setMaster(checkMasterForOutput.isSelected());
		formatter.setEL7(checkBrancheForOutput.isSelected());
//		formatter.setEL7_1(checkEL7_1ForOutput.isSelected());
		formatter.setDescription(checkDescriptionForOutput.isSelected());
		formatter.setHyperlinkColumnName(checkHyprlinkForOutput.isSelected());
		if (CheckAll.isSelected())
			formatter.setHyperlinkSelected(true);
		else
			formatter.setHyperlinkSelected(checkHyprlink.isSelected());

		if (comboBoxSeparationBetweenNameAndColumn.getSelectedItem().toString().equals("White Space"))
			formatter.setSeparationSignBetweenColumnNameAndValue("   ");
		else if (comboBoxSeparationBetweenNameAndColumn.getSelectedItem().toString().equals("New Line"))
			formatter.setSeparationSignBetweenColumnNameAndValue("\n");
		else
			formatter.setSeparationSignBetweenColumnNameAndValue(
					comboBoxSeparationBetweenNameAndColumn.getSelectedItem().toString());

		if (comboBoxSeparationBetweencolumns.getSelectedItem().toString().equals("White Space"))
			formatter.setSeparationSignBetweenColumns("   ");
		else if (comboBoxSeparationBetweencolumns.getSelectedItem().toString().equals("New Line"))
			formatter.setSeparationSignBetweenColumns("\n");
		else
			formatter.setSeparationSignBetweenColumns(comboBoxSeparationBetweencolumns.getSelectedItem().toString());

		return formatter;
	}

	/**
	 * add file extension
	 * 
	 * @param f
	 * @return
	 */
	private boolean hasFileNoExtension(File f) {
		String ext = "";
		String s = f.getName();
		System.out.println("file name " + s + " file parent " + f.getParent() + " file path " + f.getPath());
		int i = s.lastIndexOf('.');

		if (i > 0 && i < s.length() - 1) {
			ext = s.substring(i + 1).toLowerCase();
		}
		if (!ext.isEmpty() && ext.equals("txt"))
			return false;

		else
			return true;
	}

	/**
	 * Reconnect to database
	 * 
	 * @return
	 */
	private boolean reConnect() {

		boolean reconnect = true;
		UIManager.put("OptionPane.messageFont", font);
		UIManager.put("OptionPane.buttonFont", font);
		JDialog dialog = null;

		ReConnectView reConnectView = new ReConnectView();
		Window win = SwingUtilities.getWindowAncestor(this);

		dialog = new JDialog(win, "Re-Connect in MySQL Database", ModalityType.APPLICATION_MODAL);
		dialog.getContentPane().add(reConnectView);
		dialog.pack();
		dialog.setLocationRelativeTo(null);

		dialog.setVisible(true);

		reconnect = reConnectView.isConnected;
		return reconnect;
	}

}
