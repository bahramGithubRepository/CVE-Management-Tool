package ui;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Window;
import java.awt.Dialog.ModalityType;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.event.ListDataListener;

import dataModels.CVEObject;
import services.ServiceLayer;
import dataModels.CVEObject.SettingMode;

/**
 * Creates UI for editing each Row
 * 
 * @author Mr Bahram
 *
 */
public class EditRow extends JPanel implements ActionListener {
	JDialog dialog;
	private JTextField cve, score, vector;
	private JTextArea description, comment,moreInformation;
	private JComboBox<String> master, release,productComboBox; //EL71;// ,EL6
	private JButton save, delete,addProduct;
	private CVEObject cveObject;
	public boolean isEdited = false;
	private boolean isAddedNew = false;
	private SettingMode MODE = SettingMode.ADMIN;
	private String releaseName;
	private ArrayList<String> productList;

	JLabel lblCVE = new JLabel("CVE", JLabel.LEFT);

	JLabel lblScore = new JLabel("Score", JLabel.LEFT);

	JLabel lblProduct = new JLabel("Product", JLabel.LEFT);

	JLabel lblMaster = new JLabel("Master", JLabel.LEFT);

	JLabel lblRelease = new JLabel("EL7.0", JLabel.LEFT);

	JLabel lblVector = new JLabel("Vector", JLabel.LEFT);
	
	JLabel lblMoreInformation = new JLabel("More Information", JLabel.LEFT);

	JLabel lblDescription = new JLabel("Description", JLabel.LEFT);
	JLabel lblCommant = new JLabel("Affected Version", JLabel.LEFT);
	JScrollPane scroll, scrollComment,ScrollMoreInfromation;

	Font font = new Font("Arial", Font.PLAIN, 20);
	ServiceLayer service = new ServiceLayer();

	public EditRow(String releaseName,ArrayList<String> productList) {
		this.releaseName=releaseName;
		this.productList=productList;
		init();
		isAddedNew = true;
		delete.setEnabled(false);
	}

	public EditRow(CVEObject cve, SettingMode mode,ArrayList<String> productList) {
		this.MODE = mode;
		this.cveObject = cve;
		this.releaseName=cve.getReleaseName();
		this.productList=productList;
		init();
		setValue();
	}

	/**
	 * initial view
	 */
	private void init() {
		setPreferredSize(new Dimension(560, 990));
		setLayout(null);
		String[] comboValues = new String[CVEObject.ColumnValues.values().length];
		for (int i = 0; i < CVEObject.ColumnValues.values().length; i++)
			comboValues[i] = CVEObject.ColumnValues.values()[i].name().toString();

		lblCVE.setFont(font);
		lblCVE.setBounds(20, 20, 150, 35);
		cve = new JTextField();
		cve.setFont(font);
		cve.setBounds(170, 20, 310, 35);
		lblScore.setFont(font);
		lblScore.setBounds(20, 70, 150, 35);
		score = new JTextField();
		score.setFont(font);
		score.setBounds(170, 70, 310, 35);
		lblProduct.setFont(font);
		lblProduct.setBounds(20, 120, 150, 35);
		productComboBox = new JComboBox<String>(productList.toArray(new String[productList.size()]));
		productComboBox.setFont(font);
		productComboBox.setBounds(170, 120, 310, 35);
		new JComboBoxAutoCompletion(productComboBox);
		
		addProduct=new JButton("+");
		addProduct.setFont(font);
		addProduct.setBounds(490, 120, 50, 35);
		addProduct.addActionListener(this);
		if (MODE == SettingMode.USER)
			addProduct.setEnabled(false);
		
		lblMaster.setFont(font);
		lblMaster.setBounds(20, 170, 150, 35);
		master = new JComboBox<>(comboValues);
		master.setFont(font);
		master.setBounds(170, 170, 310, 35);

		lblRelease.setText(this.releaseName);
		lblRelease.setFont(font);
		lblRelease.setBounds(20, 220, 150, 35);
		release = new JComboBox<>(comboValues);
		release.setFont(font);
		release.setBounds(170, 220, 310, 35);

		lblVector.setFont(font);
		lblVector.setBounds(20, 270, 150, 35);
		vector=new JTextField();
		vector.setFont(font);
		vector.setBounds(170, 270, 310, 35);
		lblMoreInformation.setFont(font);
		lblMoreInformation.setBounds(20, 320, 150, 35);
		moreInformation=new JTextArea();
		moreInformation.setFont(font);
		ScrollMoreInfromation=new JScrollPane(moreInformation);
		ScrollMoreInfromation.setBounds(170, 320, 310, 80);

		lblDescription.setFont(font);
		lblDescription.setBounds(20, 420, 150, 35);
		description = new JTextArea();
		scroll = new JScrollPane(description);
		description.setFont(font);
		scroll.setBounds(170, 420, 310, 235);

		lblCommant.setFont(font);
		lblCommant.setBounds(20, 670, 150, 35);
		comment = new JTextArea();
		scrollComment = new JScrollPane(comment);
		comment.setFont(font);
		scrollComment.setBounds(170, 670, 310, 235);

		lblCVE.setLabelFor(cve);
		lblScore.setLabelFor(score);
		lblProduct.setLabelFor(productComboBox);
		lblMaster.setLabelFor(master);
		lblRelease.setLabelFor(release);
		lblDescription.setLabelFor(description);

		save = new JButton("Save");
		save.addActionListener(this);
		save.setFont(font);
		save.setBounds(20, 920, 150, 50);
		if (MODE == SettingMode.USER)
			save.setEnabled(false);
		delete = new JButton("Delete");
		delete.addActionListener(this);
		delete.setFont(font);
		delete.setBounds(330, 920, 150, 50);
		if (MODE == SettingMode.USER)
			delete.setEnabled(false);
		add(lblCVE);
		add(cve);
		add(lblScore);
		add(score);
		add(lblProduct);
		add(productComboBox);
		add(addProduct);
		add(lblMaster);
		add(master);
		add(lblRelease);
		add(release);
		add(lblVector);
		add(vector);
		add(lblMoreInformation);
		add(ScrollMoreInfromation);
		add(lblDescription);
		add(scroll);
		add(lblCommant);
		add(scrollComment);
		add(save);
		add(delete);
	}

	/**
	 * set default value window
	 */
	private void setValue() {

		cve.setText(cveObject.getCve());

		cve.setEnabled(false);
		productComboBox.setSelectedItem(cveObject.getProduct());

		if (cveObject.getScore() == -1)
			score.setText("");
		else
			score.setText((Double.toString(cveObject.getScore())));

		if (cveObject.getMaster() == CVEObject.ColumnValues.Unknown)
			master.setSelectedIndex(0);
		else if (cveObject.getMaster() == CVEObject.ColumnValues.Fixed)
			master.setSelectedIndex(1);
		else if (cveObject.getMaster() == CVEObject.ColumnValues.NotFixed)
			master.setSelectedIndex(2);
		else if (cveObject.getMaster() == CVEObject.ColumnValues.NA)
			master.setSelectedIndex(3);
		else if (cveObject.getMaster() == CVEObject.ColumnValues.InProgress)
			master.setSelectedIndex(4);
		else
			master.setSelectedIndex(5);
		
		
		
		if (cveObject.getRelease() == CVEObject.ColumnValues.Unknown)
			release.setSelectedIndex(0);
		else if (cveObject.getRelease() == CVEObject.ColumnValues.Fixed)
			release.setSelectedIndex(1);
		else if (cveObject.getRelease() == CVEObject.ColumnValues.NotFixed)
			release.setSelectedIndex(2);
		else if (cveObject.getRelease() == CVEObject.ColumnValues.NA)
			release.setSelectedIndex(3);
		else if (cveObject.getRelease() == CVEObject.ColumnValues.InProgress)
			release.setSelectedIndex(4);
		else
			release.setSelectedIndex(5);


		description.setText(cveObject.getDescription());
		comment.setText(cveObject.getComment());
		vector.setText(cveObject.getVector());
		moreInformation.setText(cveObject.getMoreInformation());

	}

	@Override
	public void actionPerformed(ActionEvent e) {
		UIManager.put("OptionPane.messageFont", font);
		UIManager.put("OptionPane.buttonFont", font);

		if (e.getSource() == save) {

			if (cve.getText().isEmpty()) {
				JOptionPane.showMessageDialog(this, "You are not allowed to leave CVE field empty", "Error",
						JOptionPane.ERROR_MESSAGE);
				return;
			}

			double scoreDouble = -1;
			try {
				if (!score.getText().isEmpty())
					scoreDouble = Double.valueOf(score.getText());
			} catch (NumberFormatException e2) {
				JOptionPane.showMessageDialog(this, "The Score value should be EMPTY Or  0<= number<=10 ", "Error",
						JOptionPane.ERROR_MESSAGE);
				return;
			}

			if (!score.getText().isEmpty() && (scoreDouble < 0 || scoreDouble > 10)) {
				JOptionPane.showMessageDialog(this, "The Score value should be EMPTY Or  0<= number<=10 ", "Error",
						JOptionPane.ERROR_MESSAGE);
				return;
			}
			CVEObject updatedValu = new CVEObject();
			updatedValu.setCve(cve.getText());
			updatedValu.setEdited(true);
			updatedValu.setProduct(productComboBox.getSelectedItem().toString());
			if (score.getText().isEmpty())
				updatedValu.setScore(-1);
			else
				updatedValu.setScore(Double.valueOf(score.getText()));

			updatedValu.setMaster(CVEObject.ColumnValues.values()[master.getSelectedIndex()]);
			updatedValu.setRelease(CVEObject.ColumnValues.values()[release.getSelectedIndex()]);
			updatedValu.setDescription(description.getText());
			updatedValu.setComment(comment.getText());
			updatedValu.setVector(vector.getText());
			updatedValu.setMoreInformation(moreInformation.getText());
			updatedValu.setReleaseName(this.releaseName);
			if (isAddedNew) {
				int result = -1;
				try {
					result = service.addNewCVEToDatabase(updatedValu);
				} catch (SQLException e1) {

					if (reConnect()) {
						try {
							result = service.addNewCVEToDatabase(updatedValu);
						} catch (SQLException e2) {
							JOptionPane.showMessageDialog(this, "The Application can't access to database."+e2.getMessage(),
									"Connection Error", JOptionPane.ERROR_MESSAGE);

						}
					}

				}
				if (result == 0) {
					JOptionPane.showMessageDialog(this,
							"The CVE " + updatedValu.getCve() + " already exist in Database and has not been added ",
							"Error", JOptionPane.ERROR_MESSAGE);
				} else if (result > 0) {
					isEdited = true;
				} else
					JOptionPane.showMessageDialog(this,
							"Fail has been acquired in recording " + updatedValu.getCve() + " into Database  ", "Error",
							JOptionPane.ERROR_MESSAGE);
			} else {
				boolean result = false;
				try {
					result = service.updateRow(updatedValu,cveObject.getProduct());
				} catch (SQLException e1) {
					if (reConnect()) {
						try {
							result = service.updateRow(updatedValu,cveObject.getProduct());
						} catch (SQLException e2) {
							JOptionPane.showMessageDialog(this, "The Application can't access to database. Error: "+e2.getMessage(),
									"Connection Error", JOptionPane.ERROR_MESSAGE);

						}
					}
				}

				if (result) {
					isEdited = true;
				} else
					JOptionPane.showMessageDialog(this,
							" Duplicate entry CVE: " + updatedValu.getCve() + " with Product Name: "+updatedValu.getProduct()+" "
									+ "already exist in Database and has not been updated ", "Error",
							JOptionPane.ERROR_MESSAGE);
			}

			closeWindoe();
		} else if (e.getSource() == delete) {

			int selectedJOptionResultButton = JOptionPane.showOptionDialog(this,
					"Are you sutre to delete " + cve.getText(), "Warning", JOptionPane.OK_CANCEL_OPTION,
					JOptionPane.WARNING_MESSAGE, null, null, null);
			if (selectedJOptionResultButton == JOptionPane.OK_OPTION) {
				boolean result = false;
				try {
					result = service.deleteRow(cve.getText(),this.releaseName,cveObject.getProduct());
					if(!result){
						JOptionPane.showMessageDialog(this, "The delete request has not been committed",
								"Fail Error", JOptionPane.ERROR_MESSAGE);
					}
				} catch (SQLException e1) {
					if (reConnect()) {
						try {
							result = service.deleteRow(cve.getText(),this.releaseName,cveObject.getProduct());
							if(!result){
								JOptionPane.showMessageDialog(this, "The delete request has not been committed",
										"Fail Error", JOptionPane.ERROR_MESSAGE);
							}
						} catch (SQLException e2) {
							JOptionPane.showMessageDialog(this, "The Application can't access to database. ",
									"Connection Error", JOptionPane.ERROR_MESSAGE);

						}
					}
				}

				if (result) {
					isEdited = true;
				} else
					JOptionPane.showMessageDialog(this,
							"Fail has been acquired in deleting " + cve.getText() + " from Database  ", "Error",
							JOptionPane.ERROR_MESSAGE);
			}

			closeWindoe();
		}else if(e.getSource()==addProduct){
			AddNewProductView addNewPrductView = new AddNewProductView();
			Window win = SwingUtilities.getWindowAncestor(this);

			if (win != null) {
				dialog = new JDialog(win, "Add a new product", ModalityType.APPLICATION_MODAL);
				dialog.getContentPane().add(addNewPrductView);
				dialog.pack();
				dialog.setLocationRelativeTo(null);
			}

			dialog.setVisible(true);
			if(addNewPrductView.value!=null){
				ArrayList<String> productModel=null;
				try {
					productModel=service.getProductList();
				} catch (SQLException e1) {
					if(reConnect()){
						try {
							productModel=service.getProductList();
						} catch (SQLException e2) {
							JOptionPane.showMessageDialog(this, "The Application can't access to database. "+e2.getMessage(),
									"Connection Error", JOptionPane.ERROR_MESSAGE);
						}
					}
				}
				if(productModel!=null){
					productComboBox.removeAllItems();
					productComboBox.setModel(new DefaultComboBoxModel<String>(productModel.toArray(new String[productModel.size()])));
					productComboBox.setSelectedItem(addNewPrductView.value);
				}

			}
		}
		

	}

	/**
	 * close open window
	 */
	private void closeWindoe() {
		Window win = SwingUtilities.getWindowAncestor(this);
		if (win != null) {
			win.dispose();
		}

	}

	/**
	 * Reconnect to database
	 * 
	 * @return
	 */
	private boolean reConnect() {

		boolean reconnect = true;
		UIManager.put("OptionPane.messageFont", font);
		UIManager.put("OptionPane.buttonFont", font);
		JDialog dialog = null;

		ReConnectView reConnectView = new ReConnectView();
		Window win = SwingUtilities.getWindowAncestor(this);

		dialog = new JDialog(win, "Re-Connect in MySQL Database", ModalityType.APPLICATION_MODAL);
		dialog.getContentPane().add(reConnectView);
		dialog.pack();
		dialog.setLocationRelativeTo(null);

		dialog.setVisible(true);

		reconnect = reConnectView.isConnected;
		return reconnect;
	}
}
